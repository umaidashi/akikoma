datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Timetable {
  id        String   @id @default(cuid())
  komas     Koma[]
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Koma {
  id          String    @id @default(cuid())
  name        String?
  day         String
  start       Int
  end         Int
  timeTableId String
  timeTable   Timetable @relation(fields: [timeTableId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([timeTableId])
}

model University {
  id                String              @id @default(cuid())
  name              String
  faculty           String?
  templateTimetable TemplateTimetable[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model TemplateTimetable {
  id           String         @id @default(cuid())
  name         String
  userId       String?
  user         User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  uniId        String?
  university   University?    @relation(fields: [uniId], references: [id], onDelete: Cascade)
  templateKoma TemplateKoma[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([userId])
  @@index([uniId])
}

model TemplateKoma {
  id                  String            @id @default(cuid())
  name                String
  start               Int
  end                 Int
  templateTimetableId String
  templateTimetable   TemplateTimetable @relation(fields: [templateTimetableId], references: [id], onDelete: Cascade)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([templateTimetableId])
}

// following func
model Relationships {
  followerId  String
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followingId String
  following   User     @relation("following", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// auth
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  accounts          Account[]
  sessions          Session[]
  templateTimetable TemplateTimetable[]
  Timetable         Timetable[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  follower          Relationships[]     @relation("follower")
  following         Relationships[]     @relation("following")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
